{
  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs" ;
    flake-utils.url = "github:numtide/flake-utils" ;
    structure-utils.url = "github:rebelplutonium/structure/085edb20ed2ea985308305d7298772b0e5913ee7" ;
  } ;
  outputs = { self , nixpkgs , flake-utils , structure-utils } : flake-utils.lib.eachDefaultSystem ( system : let
  pkgs = nixpkgs.legacyPackages.${ system } ;
  words = [
    "Null"
    "StartHeading"
    "StartText"
    "EndText"
    "EndTransmission"
    "Enquiry"
    "Acknowledgement"
    "Bell"
    "BackSpace"
    "HorizontalTab"
    "LineFeed"
    "VerticalTab"
    "FormFeed"
    "CarriageReturn"
    "ShiftOut"
    "ShiftIn"
    "DataLineEscape"
    "DeviceControl1"
    "DeviceControl2"
    "DeviceControl3"
    "DeviceControl4"
    "NegativeAcknowledgement"
    "SynchronousIdle"
    "EndTransmissionBlock"
    "Cancel"
    "EndMedium"
    "Substitute"
    "Escape"
    "FileSeparator"
    "GroupSeparator"
    "RecordSeparator"
    "UnitSeparator"
    "Space"
    "ExclamationMark"
    "DoubleQuotes"
    "Number"
    "Dollar"
    "Percent"
    "Ampersand"
    "SingleQuote"
    "OpenBracket"
    "CloseBracket"
    "Asterisk"
    "Plus"
    "Comma"
    "Hyphen"
    "Period"
    "ForwardSlash"
    "Zero"
    "One"
    "Two"
    "Three"
    "Four"
    "Five"
    "Six"
    "Seven"
    "Eight"
    "Nine"
    "Colon"
    "Semicolon"
    "OpenAngledBracket"
    "Equals"
    "CloseAngledBracket"
    "QuestionMark"
    "At"
    "AMSTERDAM"
    "BALTIMORE"
    "CASABLANCA"
    "DANEMARK"
    "EDISON"
    "FLORIDA"
    "GALLIPOLI"
    "HAVANA"
    "ITALY"
    "JERUSALEM"
    "KHARTOUM"
    "LIVERPOOL"
    "MADAGASCAR"
    "NICE"
    "OSLO"
    "PARIS"
    "QUEBEC"
    "ROME"
    "SANTIAGO"
    "TRIPOLI"
    "UPSALA"
    "VALENCIA"
    "WASHINGTON"
    "XENIA"
    "YOKOHOMA"
    "ZURICH"
    "OpeningBracket"
    "BackwardsSlash"
    "ClosingBracket"
    "Caret"
    "Underscore"
    "Grave"
    "alfa"
    "bravo"
    "charlie"
    "delta"
    "echo"
    "foxtrot"
    "golf"
    "hotel"
    "india"
    "juliett"
    "kilo"
    "limo"
    "mike"
    "november"
    "oscar"
    "papa"
    "quebec"
    "romeo"
    "sierra"
    "tango"
    "uniform"
    "victor"
    "whiskey"
    "x-ray"
    "yankee"
    "zulu"
    "OpeningBrace"
    "VerticalBar"
    "ClosingBrace"
    "Tilde"
    "Delete"
  ] ;
  bash-scripting = structure-utils.lib.${ system }.bash-scripting ;
  nix-tools = structure-utils.lib.${ system }.nix-tools ;
  in {
    packages.phonetic = pkgs.writeShellScriptBin "phonetic" ''
      if [ ${ bash-scripting.dollar "1" } == "encode" ]
      then
        ${ pkgs.coreutils }/bin/tee | ${ pkgs.coreutils }/bin/fold --width 1 | ${ pkgs.coreutils }/bin/tr --delete "\n" | ${ pkgs.coreutils }/bin/od --address-radix=n --format=dC | ${ pkgs.coreutils }/bin/printf "%03d " $( ${ pkgs.coreutils }/bin/tee ) | ${ pkgs.gnused }/bin/sed ${ builtins.concatStringsSep " " ( builtins.genList ( index : "-e \"s#${ builtins.substring 1 3 ( builtins.toString ( 1000 + index ) ) }#${ builtins.elemAt words index }#g\"" ) ( builtins.length words ) ) }
      elif [ ${ bash-scripting.dollar "1" } == "decode" ]
      then
        ${ pkgs.coreutils }/bin/tee | ${ pkgs.coreutils }/bin/tr "a-z" "A-Z" | ${ pkgs.gnused }/bin/sed ${ builtins.concatStringsSep " " ( builtins.genList ( index : "-e \"s#${ nix-tools.to-upper-case ( builtins.elemAt words index ) }#${ builtins.toString index }#g\"" ) ( builtins.length words ) ) } | ${ pkgs.coreutils }/bin/fold --width 4 | while read CODE
	do
	  ${ pkgs.coreutils }/bin/printf "\x$( ${ pkgs.coreutils }/bin/printf %x ${ bash-scripting.dollar "CODE" } )"
	done
      fi
    '' ;
    devShell = pkgs.mkShell { buildInputs = [ self.packages.${ system }.phonetic pkgs.emacs ] ; } ;
  } ) ;
}
